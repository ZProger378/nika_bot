###################################
# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–±—É—á–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ #
###################################
import json  # –ú–æ–¥—É–ª—å –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .json
import wiki  # –ú–æ–¥—É–ª—å –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∏–≤–∏–ø–µ–¥–∏–∏  [MYSELF]
import fuzz_methods  # –ú–æ–¥—É–ª—å, –≤–∫–ª—é—á–∞—é—â–∏–π –≤ —Å–µ–±—è –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–µ—á—ë—Ç–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è  [MYSELF]
from config import bot  # –û–±—ä–µ–∫—Ç TeleBot  [MYSELF]
from random import randint  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
from fuzz_methods import is_message_to_bot  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—â–∞—é—Ç—Å—è –∫ –±–æ—Ç—É  [MYSELF]

# –ú–æ–¥—É–ª—å –∏–≥—Ä—ã –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏  [MYSELF]
from TicTacToe.markups import main_markup as tttoe_markup
from TicTacToe.callback import tttoe_callback

# –ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–ø–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite, –∏—Å–ø–æ–ª—å—â—É—é—â–∏–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –û–û–ü  [MYSELF]
from database import User, TTToe, Message, Messages, TTToeGames


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    # –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    message = call.message
    data = call.data
    if data.startswith("tictactoe_"):  # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ø–æ–ª–µ –∏–≥—Ä—ã
        tttoe_callback(call, bot)  # –í—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}")


@bot.message_handler(chat_types=["group", "supergroup"])
def main_handler(message):
    #######################
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ #
    #######################

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    mes = Message(message=message)
    mes.write_db()

    text = message.text.lower()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ lowercase
    user = User(message.from_user.id)  # –ü–æ–ª—É—á–∞—é –æ–±—ä–µ–∫—Ç "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if not user.is_exist():  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user.create(username=message.from_user.username.lower())  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    if message.reply_to_message and message.reply_to_message.from_user.id not in [message.from_user.id,
                                                                                  bot.get_me().id]:
        answers = fuzz_methods.get_reply_text(text)
        if "!rep" in answers or text.startswith("+"):  # –ï—Å–ª–∏ –≤—ã—è–≤–ª–µ–Ω–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —á–ª–µ–Ω—É –≥—Ä—É–ø–ø—ã
            user_id = message.reply_to_message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–ª–µ–Ω–∞ –≥—Ä—É–ø–ø—ã
            username = bot.get_chat_member(chat_id=message.chat.id, user_id=user_id).user.username  # –ü–æ–ª—É—á–µ–Ω–∏–µ username
            user = User(user_id)
            if not user.is_exist():
                user.create(username)
            user.addrep()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
            bot.reply_to(message, f"–£–≤–∞–∂–µ–Ω–∏–µ –æ–∫–∞–∑–∞–Ω–æ @{username} (+1 –∫ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏)")
        elif "!new_alias" in answers:
            user_id = message.reply_to_message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–ª–µ–Ω–∞ –≥—Ä—É–ø–ø—ã
            username = bot.get_chat_member(chat_id=message.chat.id, user_id=user_id).user.username  # –ü–æ–ª—É—á–µ–Ω–∏–µ username
            user = User(user_id)
            alias = ""
            alias_start = text.find('"')
            alias_end = text.find('"', alias_start + 1)
            if alias_start != -1:
                for i in range(alias_start + 1, alias_end):
                    alias += text[i]
                user.new_alias(alias)
                bot.reply_to(message, f"<b>–ù–æ–≤–∞—è –∫–ª–∏—á–∫–∞</b> \"<i>{alias}</i>\" –¥–ª—è @{username}")
            else:
                bot.reply_to(message, f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–∞—Ç—å –∫–ª–∏—á–∫—É —á–µ–ª–æ–≤–µ–∫—É, "
                                      f"—Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                                      f"\"–ö–ª–∏—á–∫–∞\" –∏ –≤ –∫–æ–≤—ã—á–∫–∞—Ö —É–∫–∞–∑–∞—Ç—å –∫–ª–∏—á–∫—É\n\n"
                                      f"<code><i>–ö–ª–∏—á–∫–∞ \"–Ω–æ–≤–∞—è –∫–ª–∏—á–∫–∞\"</i></code>")

    # –ï—Å–ª–∏ –æ–±—Ä–∞—â–∞—é—Ç—Å—è –∫ –±–æ—Ç—É
    if is_message_to_bot(text) or message.reply_to_message and message.reply_to_message.from_user.id == bot.get_me().id:
        if is_message_to_bot(text):
            names = json.load(open("model.json", "rb"))["name"]
            if text not in names:
                text_list = text.split(" ")
                text_list[0] = ""
                text = " ".join(text_list)
        text = fuzz_methods.clear(text)
        answers = fuzz_methods.get_reply_text(text)  # –ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        for i, answer in enumerate(answers):
            if not answer.startswith("!"):  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ –∫–æ–º–∞–Ω–¥–∞
                if not i:
                    if i in ["–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å(", "–Ø –Ω–µ —Å–æ–≤—Å–µ–º —Ç–µ–±—è –ø–æ–Ω–∏–º–∞—é",
                             "–Ø –Ω–µ –ø–æ–Ω—è–ª–∞, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–∫–∞–∑–∞—Ç—å \uD83D\uDE44", "?"]:
                        pass
                    bot.reply_to(message, answer)
                else:
                    bot.send_message(message.chat.id, answer)
            else:
                #####################
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ #
                #####################

                if answer == "!tictactoe":  # –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ 2-–≥–æ –∏–≥—Ä–æ–∫–∞
                    username = None
                    for word in text.split(" "):
                        if word.startswith("@"):
                            username = word.split("@")[-1]
                    if username is not None:  # –ï—Å–ª–∏ –∏–º—è 2-–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–æ = –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
                        user = User(username=username)
                        # –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –∏ –≤—ã–≤–æ–¥ –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è
                        game = TTToe(randint(100000, 9999999))
                        game.create(message.from_user.id, user.id)
                        bot.send_message(message.chat.id, f"–•–æ–¥ @{message.from_user.username}",
                                         reply_markup=tttoe_markup(game.id))
                    else:  # –ï—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
                        bot.reply_to(message, f"–ù–∞–ø–∏—à–∏ –Ω–∏–∫, —Å –∫–µ–º —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å (–¢–∏–ø–æ: @Name)")
                    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                elif answer == "!userinfo":  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
                    user = User(message.from_user.id)
                    messages = Messages()
                    messages = messages.filter_by_id(message.from_user.id)
                    bot.reply_to(message, f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ</b>\n\n"
                                          f"üë§ USERNAME: @{user.username}\n"
                                          f"ü§ñ ID: <code>{user.id}</code>\n"
                                          f"üòé –†–µ–ø—É—Ç–∞—Ü–∏—è: <b>{user.rep}</b>\n"
                                          f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{len(messages)}</b>\n"
                                          f"‚úèÔ∏è –ö–ª–∏—á–∫–∞: <i>{str(user.alias).replace('None', '–ù–µ—Ç')}</>"
                                 .replace("@None", "–ù–µ—Ç"))
                elif answer == "!wikisearch":  # –ü–æ–∏—Å–∫ –ø–æ WikiPedia
                    # –ù–∞—Ö–æ–∂—É –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    key_words = [text.find("–∫–æ–≥–¥–∞"), text.find("—á—Ç–æ"), text.find("–∫—Ç–æ")]

                    prompts = []  # –ó–∞–ø—Ä–æ—Å—ã
                    result = []  # –†–µ–∑—É–ª—å—Ç–∞—Ç

                    # –°–æ—Å—Ç–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    if sum(key_words) != -3:
                        prompt = ""
                        for question in key_words:
                            if question != -1:  # –ï—Å–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ
                                # –°–æ—Å—Ç–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å
                                for x in range(question, len(text)):
                                    prompt += text[x]
                                prompts.append(prompt)

                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
                    if not prompts:
                        prompts.append(text)  # –ó–∞–ø—Ä–æ—Å–æ–º –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ

                    for prompt in prompts:
                        # –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –≤ –≤–∏–∫–∏–ø–µ–¥–∏—é
                        result = wiki.search(prompt)
                        if result is not None:  # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞
                            # –í—ã–≤–æ–∂—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ —á–∞—Ç
                            bot.reply_to(message, f"–ü–æ –∑–∞–ø—Ä–æ—Å—É \"<i>{prompts[0]}</i>\":")
                            # –ü–µ—Ä–µ–±–æ—Ä –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                            for x, message_text in enumerate(result):
                                bot.send_message(message.chat.id, f"<b>{message_text}</b>")
                            bot.send_message(message.chat.id, f"<i>–ò—Å—Ç–æ—á–Ω–∏–∫: <b>WikiPedia</b></i>")
                            # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞
                            break
                    if not result:  # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª
                        bot.reply_to(message, f"–ü–æ –∑–∞–ø—Ä–æ—Å—É \"<i>{prompts[0]}</i>\" —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∞(")
                elif answer == "!top":
                    #################################################################
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥ #
                    #################################################################

                    messages = Messages()  # –ü–æ–ª—É—á–∞—é –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    # –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥ –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞
                    activity = {}  # {123456789: 5, 987654321: 1}
                    for mes in messages.messages:
                        if mes.user_id not in activity.keys():
                            activity[mes.user_id] = 1
                        else:
                            activity[mes.user_id] = activity[mes.user_id] + 1

                    ############################
                    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–µ–Ω—å—à–µ–Ω–∏—é #
                    ############################

                    statistic = []
                    last = None
                    while activity:
                        for x in range(len(activity.keys())):
                            if last is None:
                                last = list(activity.keys())[x]
                            else:
                                if activity[last] < activity[list(activity.keys())[x]]:
                                    last = list(activity.keys())[x]
                        statistic.append([last, activity[list(activity.keys())[x]]])
                        activity.pop(last)
                        last = None
                    #########################
                    # –í—ã–≤–æ–¥ –≤ –≤–∏–¥–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ #
                    #########################

                    statistic_text = ""
                    # –ü–µ—Ä–µ–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
                    for x, stat in enumerate(statistic):
                        if x > 19:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 20 –º–µ—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
                            break
                        else:
                            user = User(stat[0])
                            statistic_text += f"<b>{x + 1})</b> <i>@{user.username.upper()}</i> - {stat[1]}\n"
                    bot.send_message(message.chat.id, f"–¢–æ–ø –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n\n"
                                                      f"{statistic_text}")
                elif answer == "!ttoerating":
                    ###########################################
                    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥ #
                    ###########################################

                    games = TTToeGames().games
                    rating = {}
                    for game in games:
                        winner = [game.player_one, game.player_two][game.winner - 1]
                        if winner not in rating.keys():
                            rating[winner] = 1
                        else:
                            rating[winner] = rating[winner] + 1
                    ###################################
                    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è #
                    ###################################

                    statistic = []
                    last = None
                    while rating:
                        for x in range(len(rating.keys())):
                            if last is None:
                                last = list(rating.keys())[x]
                            else:
                                if rating[last] < rating[list(rating.keys())[x]]:
                                    last = list(rating.keys())[x]
                        statistic.append([last, rating[last]])
                        rating.pop(last)
                        last = None

                    #########################
                    # –í—ã–≤–æ–¥ –≤ –≤–∏–¥–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ #
                    #########################

                    statistic_text = ""
                    # –ü–µ—Ä–µ–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
                    for x, stat in enumerate(statistic):
                        if x > 19:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 20 –º–µ—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
                            break
                        else:
                            user = User(stat[0])
                            statistic_text += f"<b>{x + 1})</b> <i>@{user.username.upper()}</i> - <b>{stat[1]}</b>\n"
                    bot.send_message(message.chat.id, f"–†–µ–π—Ç–∏–Ω–≥ –≤ –º–∏–Ω–∏-–∏–≥—Ä–µ:\n\n"
                                                      f"{statistic_text}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –º–µ—Ç–æ–¥–æ–º .polling()
    print("[i] Bot is started...")
    bot.polling(none_stop=True, interval=0)
